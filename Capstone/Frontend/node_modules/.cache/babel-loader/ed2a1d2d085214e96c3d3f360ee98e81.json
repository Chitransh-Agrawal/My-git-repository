{"ast":null,"code":"// imports for utils\nimport { utilsApi, apiConstants } from \"./utils-api\";\nimport * as utils from \"../utils\";\nvar token;\n/**\n * Function to log into the application\n * @param {Object}\n * \t\temail key\n * \t\tpassword key\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n */\n\nexport async function doLogin({\n  email,\n  password\n}, successCallback, failureCallback) {\n  if (email && password) {\n    const userData = {\n      email: email,\n      password: password\n    };\n\n    try {\n      await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.POST, apiConstants.USER_API_ROUTE.LOGIN, null, null, userData, null, successCallback, failureCallback);\n    } catch (error) {\n      if (failureCallback) {\n        failureCallback(error);\n      }\n    }\n  }\n}\n/**\n * Function to sign up in the application\n * @param {Object}\n * \t\tfirstName key\n * \t\tlastName key\n * \t\temail key\n * \t\tpassword key\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n */\n\nexport async function doSignup({\n  firstName,\n  lastName,\n  email,\n  password\n}, successCallback, failureCallback) {\n  if (email && password) {\n    const userData = {\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      password: password\n    };\n\n    try {\n      await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.POST, apiConstants.USER_API_ROUTE.SIGNUP, null, null, userData, null, successCallback, failureCallback);\n    } catch (error) {\n      if (failureCallback) {\n        failureCallback(error);\n      }\n    }\n  }\n}\n/**\n * Function to log out of the application\n * @param {String} userId - ID of the user currently logged in\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n */\n\nexport async function doLogout(userId, successCallback, failureCallback) {\n  if (userId) {\n    const userData = {\n      id: userId\n    };\n\n    try {\n      await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.POST, apiConstants.USER_API_ROUTE.LOGOUT, null, null, userData, {\n        \"x-access-token\": token\n      }, successCallback, failureCallback);\n    } catch (error) {\n      if (failureCallback) {\n        failureCallback(error);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Administrator/OneDrive/Desktop/git/My-git-repository/Capstone/Frontend/src/api/userApi.js"],"names":["utilsApi","apiConstants","utils","token","doLogin","email","password","successCallback","failureCallback","userData","sendApiRequest","HTTP_METHOD","POST","USER_API_ROUTE","LOGIN","error","doSignup","firstName","lastName","SIGNUP","doLogout","userId","id","LOGOUT"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,aAAvC;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AACA,IAAIC,KAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,OAAf,CACL;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CADK,EAELC,eAFK,EAGLC,eAHK,EAIL;AACA,MAAIH,KAAK,IAAIC,QAAb,EAAuB;AACrB,UAAMG,QAAQ,GAAG;AACfJ,MAAAA,KAAK,EAAEA,KADQ;AAEfC,MAAAA,QAAQ,EAAEA;AAFK,KAAjB;;AAKA,QAAI;AACF,YAAMN,QAAQ,CAACU,cAAT,CACJT,YAAY,CAACU,WAAb,CAAyBC,IADrB,EAEJX,YAAY,CAACY,cAAb,CAA4BC,KAFxB,EAGJ,IAHI,EAIJ,IAJI,EAKJL,QALI,EAMJ,IANI,EAOJF,eAPI,EAQJC,eARI,CAAN;AAUD,KAXD,CAWE,OAAOO,KAAP,EAAc;AACd,UAAIP,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,QAAf,CACL;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,QAAb;AAAuBb,EAAAA,KAAvB;AAA8BC,EAAAA;AAA9B,CADK,EAELC,eAFK,EAGLC,eAHK,EAIL;AACA,MAAIH,KAAK,IAAIC,QAAb,EAAuB;AACrB,UAAMG,QAAQ,GAAG;AACfQ,MAAAA,SAAS,EAAEA,SADI;AAEfC,MAAAA,QAAQ,EAAEA,QAFK;AAGfb,MAAAA,KAAK,EAAEA,KAHQ;AAIfC,MAAAA,QAAQ,EAAEA;AAJK,KAAjB;;AAOA,QAAI;AACF,YAAMN,QAAQ,CAACU,cAAT,CACJT,YAAY,CAACU,WAAb,CAAyBC,IADrB,EAEJX,YAAY,CAACY,cAAb,CAA4BM,MAFxB,EAGJ,IAHI,EAIJ,IAJI,EAKJV,QALI,EAMJ,IANI,EAOJF,eAPI,EAQJC,eARI,CAAN;AAUD,KAXD,CAWE,OAAOO,KAAP,EAAc;AACd,UAAIP,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeK,QAAf,CAAwBC,MAAxB,EAAgCd,eAAhC,EAAiDC,eAAjD,EAAkE;AACvE,MAAIa,MAAJ,EAAY;AACV,UAAMZ,QAAQ,GAAG;AACfa,MAAAA,EAAE,EAAED;AADW,KAAjB;;AAIA,QAAI;AACF,YAAMrB,QAAQ,CAACU,cAAT,CACJT,YAAY,CAACU,WAAb,CAAyBC,IADrB,EAEJX,YAAY,CAACY,cAAb,CAA4BU,MAFxB,EAGJ,IAHI,EAIJ,IAJI,EAKJd,QALI,EAMJ;AAAC,0BAAmBN;AAApB,OANI,EAOJI,eAPI,EAQJC,eARI,CAAN;AAUD,KAXD,CAWE,OAAOO,KAAP,EAAc;AACd,UAAIP,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AACF","sourcesContent":["// imports for utils\nimport { utilsApi, apiConstants } from \"./utils-api\";\nimport * as utils from \"../utils\";\nvar token ;\n\n/**\n * Function to log into the application\n * @param {Object}\n * \t\temail key\n * \t\tpassword key\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n */\nexport async function doLogin(\n  { email, password },\n  successCallback,\n  failureCallback\n) {\n  if (email && password) {\n    const userData = {\n      email: email,\n      password: password,\n    };\n\n    try {\n      await utilsApi.sendApiRequest(\n        apiConstants.HTTP_METHOD.POST,\n        apiConstants.USER_API_ROUTE.LOGIN,\n        null,\n        null,\n        userData,\n        null,\n        successCallback,\n        failureCallback\n      );\n    } catch (error) {\n      if (failureCallback) {\n        failureCallback(error);\n      }\n    }\n  }\n}\n\n/**\n * Function to sign up in the application\n * @param {Object}\n * \t\tfirstName key\n * \t\tlastName key\n * \t\temail key\n * \t\tpassword key\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n */\nexport async function doSignup(\n  { firstName, lastName, email, password },\n  successCallback,\n  failureCallback\n) {\n  if (email && password) {\n    const userData = {\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      password: password,\n    };\n\n    try {\n      await utilsApi.sendApiRequest(\n        apiConstants.HTTP_METHOD.POST,\n        apiConstants.USER_API_ROUTE.SIGNUP,\n        null,\n        null,\n        userData,\n        null,\n        successCallback,\n        failureCallback\n      );\n    } catch (error) {\n      if (failureCallback) {\n        failureCallback(error);\n      }\n    }\n  }\n}\n\n/**\n * Function to log out of the application\n * @param {String} userId - ID of the user currently logged in\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n */\nexport async function doLogout(userId, successCallback, failureCallback) {\n  if (userId) {\n    const userData = {\n      id: userId,\n    };\n\n    try {\n      await utilsApi.sendApiRequest(\n        apiConstants.HTTP_METHOD.POST,\n        apiConstants.USER_API_ROUTE.LOGOUT,\n        null,\n        null,\n        userData,\n        {\"x-access-token\" : token},\n        successCallback,\n        failureCallback\n      );\n    } catch (error) {\n      if (failureCallback) {\n        failureCallback(error);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}